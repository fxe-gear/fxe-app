FORMAT: 1A

# Experience

This API describes a communication between [Experience application](https://github.com/tomasbedrich/experience-app) and its server counterpart. Please keep in mind that this API **is not private**, so every input must be validated and nonsense input values mustn't influence anyone other than a current user in any serious manner.

Other common API design principles apply:
- server endpoint should be prefixed with API version number (`.../api/v1/...`)
- unknown or empty (`null`) JSON data in requests should be ignored, empty keys should be omitted in responses
- for all GET requests an ETag header should be returned and the application should then use a If-None-Match header - based on that, the HTTP code 304 could be returned instead of 200
- for malformed requests, HTTP code 400 with optional JSON body explaining an error should be returned
- for all requests using a jumping access token, HTTP code 401 should be returned if the token is invalid
- a request rate should be limited to *N* requests per hour (a specific limit can be agreed later), then HTTP code 429 should be returned



## Group User

### POST /login/{provider}

Authenticate a user and return his jumping token.

A user can authenticate using 3 different providers:
- `jumping` - using the email and password
- `facebook` - using Facebook access token
- `google` - using Google access token

When using Facebook or Google token based authentication, a server must make a request during the user request to validate the token. This may take a little longer time, but the application is aware of it.

The successfully authenticated user should get a jumping token which is used for an application to server communication. One user can have more than one jumping token (when logged in on multiple devices), but the response should contain a latest jumping token issued for current device (app installation).

+ Parameters
    + provider: `jumping` (required, enum[string]) - Login provider.

+ Request login by jumping account (application/json;charset=UTF-8)

        {
            "email": "mark_goldmanescu@tfbnw.net",
            "password": "verystrongpassword"
        }

+ Request login by facebook token (application/json;charset=UTF-8)

        {
            "token": "EAAJZB30XByqMBABDpjvD68muYZCenMEsxUxEScF6ZBqDGkaByCvZBYHeRrvW1MtDXGG3zJEnIkowBVfuh7yi7I8LgOWjv8kbOFzQ0K07xJNCaQ832ALSiXdo9HkjOQX7pJpkSG6oZAxDIJlSU0LWUfgboG4jaz1CmgRQCF6KMdZAVwZCKoDMqmI",
            "expiresAt": 1455638078520107
        }

+ Request login by google token (application/json;charset=UTF-8)

        {
            "token": "plfkwvffgv67u0zteyvf",
            "expiresAt": 1455638078520107
        }

+ Response 200 (application/json;charset=UTF-8)

        {
            "token": "bpnjxsrb1ivyd9xf2m1k",
            "expiresAt": 1455638078520107
        }


### POST /logout

Revoke a jumping token.

+ Request
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 205


## /user


### POST

Create a new jumping account for a user.

An email verification procedure should be done by the server. Only `email` and `password` fields are required. The response should be in the same format as for `POST /login/{provider}`.

+ Request (application/json;charset=UTF-8)

        {
            "email": "mark_goldmanescu@tfbnw.net",
            "password": "verystrongpassword",
            "name": "Mark Goldmanescu",
            "weight": 80,
            "age": 36,
            "gender": "male",
            "units": "metric"
        }

+ Response 200 (application/json;charset=UTF-8)

        {
            "token": "bpnjxsrb1ivyd9xf2m1k",
            "expiresAt": 1455638078520107
        }

+ Request (application/json;charset=UTF-8)

        {
            "password": "pass",
            "name": "Mark Goldmanescu",
            "gender": "male"
        }

+ Response 400 (application/json;charset=UTF-8)

        [
            {
              "code" : 5432,
              "field" : "email",
              "message" : "Email is required."
            },
            {
               "code" : 5622,
               "field" : "password",
               "message" : "Password must be at least 6 characters long."
            }
        ]


### GET

Return all details for a current user.

The returned details are provided either by a user during a registration, downloaded from Facebook and/or Google using their APIs or both.

Following response fields deserves closer explanation:
- `id` is the internal jumping user ID
- `verified` should contain an information, if an email address has been verified or not
- `age` should be in years, it should be automatically updated according to the user last update date (it is not nescessary to have the age very accurate)
- `weight` should be in kilograms (imperial unit conversion should be done by the application)
- `gender` can be `male` or `female`
- `units` can be `metric` or `imperial`
- `provider` can contain access tokens for Facebook and/or Google

+ Request
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        {
            "id": 1234,
            "email": "mark_goldmanescu@tfbnw.net",
            "verified": false,
            "name": "Mark Goldmanescu",
            "weight": 80,
            "age": 36,
            "gender": "male",
            "units": "metric",
            "picture": "http://graph.facebook.com/100011709695718/picture?type=square",
            "provider": {
                "facebook": {
                    "token": "EAAJZB30XByqMBABDpjvD68muYZCenMEsxUxEScF6ZBqDGkaByCvZBYHeRrvW1MtDXGG3zJEnIkowBVfuh7yi7I8LgOWjv8kbOFzQ0K07xJNCaQ832ALSiXdo9HkjOQX7pJpkSG6oZAxDIJlSU0LWUfgboG4jaz1CmgRQCF6KMdZAVwZCKoDMqmI",
                    "expiresAt": 1455638078520107
                },
                "google": {
                    "token": "plfkwvffgv67u0zteyvf",
                    "expiresAt": 1455638078520107
                }
            }
        }


### PUT

Update details for a current user.

Fields not specified in the request should remain unchanged. The fields `id` and `verified` cannot be updated using this endpoint.

+ Request (application/json;charset=UTF-8)
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

    + Body

            {
                "age": 22,
                "gender": "male",
                "units": "imperial",
                "provider": {
                    "facebook": {
                        "token": "EAAJZB30XByqMBABDpjvD68muYZCenMEsxUxEScF6ZBqDGkaByCvZBYHeRrvW1MtDXGG3zJEnIkowBVfuh7yi7I8LgOWjv8kbOFzQ0K07xJNCaQ832ALSiXdo9HkjOQX7pJpkSG6oZAxDIJlSU0LWUfgboG4jaz1CmgRQCF6KMdZAVwZCKoDMqmI",
                        "expiresAt": 1455638078520107
                    }
                }
            }

+ Response 204

+ Request (application/json;charset=UTF-8)
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

    + Body

            {
                "age": -10,
                "units": "something",
            }

+ Response 400 (application/json;charset=UTF-8)

        [
            {
              "code" : 5222,
              "field" : "age",
              "message" : "Age cannot be negative."
            },
            {
               "code" : 5823,
               "field" : "units",
               "message" : "Possible values are 'metric' or 'imperial'."
            }
        ]


### POST /user/resetPassword

Send an email with a password reset link to a user.

The rest of the password reset procedure should be processed via the website.

+ Request (application/json;charset=UTF-8)

        {
            "email": "test@example.com"
        }

+ Response 204



## Group Lessons

A lesson is a time range started and ended by a user by clicking a button in the application. Lessons can be associated with [events](#reference/events). The user can have many score records for one lesson.

A scoring record is created when the score changes during a lesson (between its start time and end time). It contains a timestamp, score type and absolute score value for that type. In other words: one lesson has multiple score types and the total lesson score is a sum of maximum scores of every type.


### GET /lessons{?from,fields}

Return lessons stored on a server for a current user.

+ Parameters
    + from: `1253886827805` (optional, int) - Limit result set to lessons whose start time is newer than this value.
    + fields: `start,end` (optional, string) - Coma-separated list of fields, which should be included in a lesson object in a response. If omitted, all available fields should be returned.

+ Request all lessons with all data
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        [
            {
                "event": 1234,
                "start": 1453944230279,
                "end": 1453944249447,
                "score": [
                    {
                        "type": 3,
                        "time": 1453944244617,
                        "score": 1
                    }, {
                        "type": 1,
                        "time": 1453944244915,
                        "score": 1
                    }
                ]
            }, {
                "event": 1235,
                "start": 1453944262887,
                "end": 1453944693408,
                "score": [
                    {
                        "type": 1,
                        "time": 1453944269545,
                        "score": 1
                    }, {
                        "type": 1,
                        "time": 1453944278095,
                        "score": 2
                    }, {
                        "type": 3,
                        "time": 1453944282055,
                        "score": 1
                    }, {
                        "type": 1,
                        "time": 1453944285385,
                        "score": 3
                    }, {
                        "type": 3,
                        "time": 1453944289465,
                        "score": 2
                    }, {
                        "type": 1,
                        "time": 1453944292675,
                        "score": 4
                    }, {
                        "type": 3,
                        "time": 1453944296455,
                        "score": 3
                    }, {
                        "type": 1,
                        "time": 1453944298225,
                        "score": 5
                    }, {
                        "type": 3,
                        "time": 1453944302455,
                        "score": 4
                    }, {
                        "type": 1,
                        "time": 1453944303655,
                        "score": 6
                    }, {
                        "type": 1,
                        "time": 1453944686359,
                        "score": 7
                    }, {
                        "type": 2,
                        "time": 1453944686361,
                        "score": 1
                    }
                ]
            }, {
                "start": 1453959072292,
                "end": 1453959126095,
                "score": []
            }
        ]

+ Request only certain fields
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        [
            {
                "start": 1453944230279,
                "end": 1453944249447
            }, {
                "start": 1453944262887,
                "end": 1453944693408
            }, {
                "start": 1453959072292,
                "end": 1453959126095
            }
        ]


### POST /lessons

Upload an array of new lessons for a current user.

+ Request (application/json;charset=UTF-8)
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

    + Body

            [
                {
                    "event": 1234,
                    "start": 1453944230279,
                    "end": 1453944249447,
                    "score": [
                        {
                            "type": 3,
                            "time": 1453944244617,
                            "score": 1
                        }, {
                            "type": 1,
                            "time": 1453944244915,
                            "score": 1
                        }
                    ]
                }, {
                    "start": 1453959072292,
                    "end": 1453959126095,
                    "score": []
                }
            ]

+ Response 204


### DELETE /lesson/{start}

Delete a lesson including all its score records.

+ Parameters
    + start: `1453959072292` (required, int) - Start time of the lesson, which is its unique ID for a current user.

+ Request
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 204

+ Response 404



## Group Events

An event is created by a trainer (currently only via website). Other users then can use its ID to join their lessons with that event.

### GET /events{?name,lat,lon,from,limit}

Return a filtered list of events.

+ Parameters
    + name: `jumping party` (optional, string) - Filter events by their name.
        It should be compared case insensitive with `startsWith` method and sorted by event start in descending order.
    + lat: `49.0992133` (optional, float) - Filter events by their GPS position.
        This parameter should be ignored unless `lon` parameter is also presented. When applied, [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance) should be computed between each event location and GPS position based on `lat` and `lon` parameters. The result list should be sorted by that distance in descending order. When applied together with `name` filter, `AND` operator should be used.
    + lon: `-13.2889922` (optional, float) - See `lon` parameter description.
    + from: `1253886827805` (optional, int) - Limit result set to events whose start time is newer than this value.
    + limit: `2` (required, int) - Limit the result set to a certain number of items. Valid range: `<1; 100>`.

+ Request
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        [
            {
                "id": 1234,
                "name": "Jumping party summer edition 2015",
                "start": 1453944220279,
                "lat": 49.2192133,
                "lon": -13.2192133
            }, {
                "id": 1235,
                "name": "Jumping party summer edition 2014",
                "start": 1453944261887,
                "end": 1453944691408,
                "lat": 49.2192133,
                "lon": -13.2192133
            }
        ]


### GET /event/{id}

Get a specific event by its ID.

+ Parameters
    + id: `1235` (required, int) - An event ID.

+ Request
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        {
            "id": 1235,
            "name": "Jumping party summer edition 2014",
            "start": 1453944261887,
            "end": 1453944691408,
            "lat": 49.2192133,
            "lon": -13.2192133
        }

+ Response 404



## Group Friends

### GET /friends{?fields,scores}

Return an array of a current user *and* his friends together with their scores.

The friends who use this application can be loaded from Facebook or Google using their APIs and the result should be merged using all these data.

There are 3 different score ranges (similar to ranges in the mobile application "Me" tab):
- `last` - score for the last lesson (or zero if user has no lessons)
- `week` - sum of scores for all lessons in the current week (should reset to zero each Monday or Sunday at midnight, depending on the current user `units` settings)
- `month` - sum of scores for all lessons in the current month (should reset to zero each 1st day in a month at midnight)

This request can be repeated very often, therefore server-side caching is recommended (to prevent assembling the whole response during every request, which can lead to bad mobile application performance).

+ Parameters
    + fields: `id,score` (optional, string) - Coma-separated list of fields, which should be included in a user object in a response. Only fields `id`, `name`, `picture` and `score` should be accessible. Warning, **do NOT** return any private user data (such as access tokens, age, email, ...) under any circumstances! If omitted, all accessible fields should be returned.
    + scores: `last,week` (optional, string) - Coma-separated list of score ranges, which should be included in a score object in a response. If omitted, all score ranges should be returned.

+ Request all fields with all score ranges
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        [
            {
                "id": 1234,
                "name": "Mark Goldmanescu",
                "picture": "http://graph.facebook.com/100011709695718/picture?type=square",
                "score": {
                    "last": 123,
                    "week": 453,
                    "month": 3223
                }
            }, {
                "id": 4321,
                "name": "Filip Richter",
                "picture": "http://graph.facebook.com/1147964772/picture?type=square",
                "score": {
                    "last": 180,
                    "week": 322,
                    "month": 4223
                }
            }, {
                "id": 2341,
                "name": "Helen Moiduson",
                "picture": "http://graph.facebook.com/100011743744048/picture?type=square",
                "score": {
                    "last": 246,
                    "week": 246,
                    "month": 1289
                }
            }
        ]

+ Request only user IDs with their scores for the last lesson and the current week
    + Headers

            Authorization: Token bpnjxsrb1ivyd9xf2m1k

+ Response 200 (application/json;charset=UTF-8)

        [
            {
                "id": 1234,
                "score": {
                    "last": 123,
                    "week": 453
                }
            }, {
                "id": 4321,
                "score": {
                    "last": 180,
                    "week": 322
                }
            }, {
                "id": 2341,
                "score": {
                    "last": 246,
                    "week": 246
                }
            }
        ]
